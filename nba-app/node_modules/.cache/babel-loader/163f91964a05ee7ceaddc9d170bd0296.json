{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _range2 = require('lodash/range');\n\nvar _range3 = _interopRequireDefault(_range2);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _inlineStylePrefixer = require('inline-style-prefixer');\n\nvar _inlineStylePrefixer2 = _interopRequireDefault(_inlineStylePrefixer);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-env browser */\n\n\nvar babelPluginFlowReactPropTypes_proptype_ViewProps = {\n  index: require('prop-types').number.isRequired,\n  key: require('prop-types').number.isRequired,\n  active: require('prop-types').bool.isRequired,\n  transitionState: require('prop-types').oneOf(['in', 'out', 'entering', 'leaving']).isRequired,\n  style: require('prop-types').object.isRequired,\n  ref: require('prop-types').func.isRequired\n};\nif (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_ViewProps', {\n  value: babelPluginFlowReactPropTypes_proptype_ViewProps,\n  configurable: true\n});\nvar babelPluginFlowReactPropTypes_proptype_DefaultProps = {\n  animateHeight: require('prop-types').bool.isRequired,\n  keepViewsMounted: require('prop-types').bool.isRequired,\n  transitionDuration: require('prop-types').number.isRequired,\n  transitionTimingFunction: require('prop-types').string.isRequired,\n  prefixer: typeof _inlineStylePrefixer2.default === 'function' ? require('prop-types').instanceOf(_inlineStylePrefixer2.default).isRequired : require('prop-types').any.isRequired,\n  style: require('prop-types').object.isRequired,\n  viewportStyle: require('prop-types').object.isRequired,\n  measureHeight: require('prop-types').func.isRequired\n};\nif (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_DefaultProps', {\n  value: babelPluginFlowReactPropTypes_proptype_DefaultProps,\n  configurable: true\n});\nvar babelPluginFlowReactPropTypes_proptype_Props = {\n  activeView: require('prop-types').number.isRequired,\n  numViews: require('prop-types').number.isRequired,\n  renderView: require('prop-types').func.isRequired,\n  keepViewsMounted: require('prop-types').bool.isRequired,\n  animateHeight: require('prop-types').bool.isRequired,\n  transitionDuration: require('prop-types').number.isRequired,\n  transitionTimingFunction: require('prop-types').string.isRequired,\n  prefixer: typeof _inlineStylePrefixer2.default === 'function' ? require('prop-types').instanceOf(_inlineStylePrefixer2.default).isRequired : require('prop-types').any.isRequired,\n  fillParent: require('prop-types').bool,\n  className: require('prop-types').string,\n  style: require('prop-types').object.isRequired,\n  viewportClassName: require('prop-types').string,\n  viewportStyle: require('prop-types').object.isRequired,\n  measureHeight: require('prop-types').func.isRequired,\n  rootRef: require('prop-types').func,\n  viewportRef: require('prop-types').func\n};\nif (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_Props', {\n  value: babelPluginFlowReactPropTypes_proptype_Props,\n  configurable: true\n});\nvar babelPluginFlowReactPropTypes_proptype_State = {\n  height: require('prop-types').number,\n  transitioning: require('prop-types').bool.isRequired,\n  activeView: require('prop-types').number.isRequired,\n  prevActiveView: require('prop-types').number\n};\nif (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_State', {\n  value: babelPluginFlowReactPropTypes_proptype_State,\n  configurable: true\n});\nvar fillStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0\n};\nvar viewStyle = {\n  position: 'relative',\n  display: 'inline-block',\n  verticalAlign: 'top',\n  whiteSpace: 'normal',\n  width: '100%'\n};\n\nvar ViewSlider = function (_React$Component) {\n  (0, _inherits3.default)(ViewSlider, _React$Component);\n\n  function ViewSlider() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, ViewSlider);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ViewSlider.__proto__ || (0, _getPrototypeOf2.default)(ViewSlider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      height: undefined,\n      transitioning: false,\n      activeView: _this.props.activeView,\n      // this is used to determine the correct transitionState for the previous active view.\n      prevActiveView: null\n    }, _this.views = [], _this.timeouts = {}, _this.measureHeight = function (node) {\n      if (!node) return null;\n      return _this.props.measureHeight(node);\n    }, _this.onTransitionEnd = function (event) {\n      // ignore transitionend events from deeper components\n      if (event && event.target !== _this.viewport) return; // phase 0: unset height and disable transitions\n\n      _this.setState({\n        height: undefined,\n        prevActiveView: null,\n        transitioning: false\n      });\n    }, _this.getTransitionState = function (childIndex) {\n      var _this$state = _this.state,\n          activeView = _this$state.activeView,\n          prevActiveView = _this$state.prevActiveView;\n      if (prevActiveView == null) return childIndex === activeView ? 'in' : 'out';\n      if (childIndex === activeView) return 'entering';\n      if (childIndex === prevActiveView) return 'leaving';\n      return 'out';\n    }, _this.renderView = function (index) {\n      var _this$props = _this.props,\n          fillParent = _this$props.fillParent,\n          prefixer = _this$props.prefixer,\n          keepViewsMounted = _this$props.keepViewsMounted;\n      var _this$state2 = _this.state,\n          activeView = _this$state2.activeView,\n          transitioning = _this$state2.transitioning;\n      var style = (0, _extends3.default)({}, viewStyle);\n\n      if (fillParent) {\n        (0, _assign2.default)(style, fillStyle);\n        style.overflow = 'auto';\n        style.left = index * 100 + '%';\n      } // when not transitioning, render empty placeholder divs before the active view to push it into the right\n      // horizontal position\n\n\n      if (!transitioning && activeView !== index && !keepViewsMounted) {\n        return React.createElement('div', {\n          key: index,\n          style: prefixer.prefix(style)\n        });\n      }\n\n      return _this.props.renderView({\n        index: index,\n        key: index,\n        active: index === activeView,\n        transitionState: _this.getTransitionState(index),\n        style: prefixer.prefix(style),\n        ref: function ref(c) {\n          return _this.views[index] = c;\n        }\n      });\n    }, _this.animateHeight = function () {\n      var _this$props2 = _this.props,\n          animateHeight = _this$props2.animateHeight,\n          fillParent = _this$props2.fillParent,\n          keepViewsMounted = _this$props2.keepViewsMounted;\n      return animateHeight && !fillParent && !keepViewsMounted;\n    }, _this.rootRef = function (node) {\n      _this.root = node;\n      var rootRef = _this.props.rootRef;\n      if (rootRef) rootRef(node);\n    }, _this.viewportRef = function (node) {\n      _this.viewport = node;\n      var viewportRef = _this.props.viewportRef;\n      if (viewportRef) viewportRef(node);\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(ViewSlider, [{\n    key: 'setTimeout',\n    value: function (_setTimeout) {\n      function setTimeout(_x, _x2, _x3) {\n        return _setTimeout.apply(this, arguments);\n      }\n\n      setTimeout.toString = function () {\n        return _setTimeout.toString();\n      };\n\n      return setTimeout;\n    }(function (name, callback, delay) {\n      if (this.timeouts[name]) clearTimeout(this.timeouts[name]);\n      this.timeouts[name] = setTimeout(callback, delay);\n    })\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      var _props = this.props,\n          activeView = _props.activeView,\n          transitionDuration = _props.transitionDuration,\n          keepViewsMounted = _props.keepViewsMounted;\n      var newState = void 0;\n\n      if (activeView !== this.state.activeView && this.state.height === undefined) {\n        if (keepViewsMounted) {\n          // scroll all views except the current back to the top\n          for (var i = 0; i < this.views.length; i++) {\n            if (i === this.state.activeView) continue;\n            if (this.views[i]) this.views[i].scrollTop = 0;\n          }\n        } // phase 1: set current height\n\n\n        newState = {\n          height: this.measureHeight(this.views[this.state.activeView])\n        };\n      } else if (this.state.height !== undefined && !this.state.transitioning) {\n        // phase 2: enable transitions\n        newState = {\n          transitioning: true\n        };\n      } else if (activeView !== this.state.activeView) {\n        // phase 3: change height/activeView\n        newState = {\n          activeView: activeView,\n          prevActiveView: this.state.activeView,\n          height: this.measureHeight(this.views[activeView])\n        };\n      }\n\n      var finalNewState = newState;\n      if (!finalNewState) return;\n      this.setState(finalNewState, function () {\n        if (finalNewState.activeView != null) {\n          _this2.setTimeout('onTransitionEnd', _this2.onTransitionEnd, transitionDuration);\n        }\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      for (var _name in this.timeouts) {\n        clearTimeout(this.timeouts[_name]);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          style = _props2.style,\n          className = _props2.className,\n          viewportClassName = _props2.viewportClassName,\n          viewportStyle = _props2.viewportStyle,\n          numViews = _props2.numViews,\n          prefixer = _props2.prefixer,\n          fillParent = _props2.fillParent,\n          transitionDuration = _props2.transitionDuration,\n          transitionTimingFunction = _props2.transitionTimingFunction,\n          keepViewsMounted = _props2.keepViewsMounted;\n      var animateHeight = this.animateHeight();\n      var _state = this.state,\n          activeView = _state.activeView,\n          height = _state.height,\n          transitioning = _state.transitioning;\n      var finalOuterStyle = (0, _extends3.default)({\n        transitionProperty: 'height',\n        transitionDuration: transitionDuration + 'ms',\n        transitionTimingFunction: transitionTimingFunction,\n        overflow: 'hidden',\n        height: animateHeight && height != null ? height : undefined\n      }, style);\n      var finalViewportStyle = (0, _extends3.default)({\n        transform: 'translateX(-' + activeView * 100 + '%)',\n        whiteSpace: 'nowrap',\n        minHeight: '100%',\n        transition: transitioning ? 'transform ' + transitionTimingFunction + ' ' + transitionDuration + 'ms' : undefined\n      }, viewportStyle);\n\n      if (fillParent) {\n        (0, _assign2.default)(finalOuterStyle, fillStyle);\n        (0, _assign2.default)(finalViewportStyle, fillStyle);\n      } // when not transitioning, render empty placeholder divs before the active view to push it into the right\n      // horizontal position\n\n\n      var views = (0, _range3.default)(transitioning || keepViewsMounted ? numViews : activeView + 1).map(this.renderView);\n      return React.createElement('div', {\n        style: prefixer.prefix(finalOuterStyle),\n        className: className,\n        ref: this.rootRef\n      }, React.createElement('div', {\n        className: viewportClassName,\n        style: prefixer.prefix(finalViewportStyle),\n        ref: this.viewportRef,\n        onTransitionEnd: this.onTransitionEnd\n      }, views));\n    }\n  }]);\n  return ViewSlider;\n}(React.Component);\n\nViewSlider.defaultProps = {\n  animateHeight: true,\n  transitionDuration: 500,\n  transitionTimingFunction: 'ease',\n  keepViewsMounted: false,\n  prefixer: new _inlineStylePrefixer2.default(),\n  style: {},\n  viewportStyle: {},\n  measureHeight: function measureHeight(node) {\n    return node.offsetHeight;\n  }\n};\nViewSlider.propTypes = {\n  activeView: require('prop-types').number.isRequired,\n  numViews: require('prop-types').number.isRequired,\n  renderView: require('prop-types').func.isRequired,\n  keepViewsMounted: require('prop-types').bool.isRequired,\n  animateHeight: require('prop-types').bool.isRequired,\n  transitionDuration: require('prop-types').number.isRequired,\n  transitionTimingFunction: require('prop-types').string.isRequired,\n  prefixer: typeof _inlineStylePrefixer2.default === 'function' ? require('prop-types').instanceOf(_inlineStylePrefixer2.default).isRequired : require('prop-types').any.isRequired,\n  fillParent: require('prop-types').bool,\n  className: require('prop-types').string,\n  style: require('prop-types').object.isRequired,\n  viewportClassName: require('prop-types').string,\n  viewportStyle: require('prop-types').object.isRequired,\n  measureHeight: require('prop-types').func.isRequired,\n  rootRef: require('prop-types').func,\n  viewportRef: require('prop-types').func\n};\nexports.default = ViewSlider;","map":null,"metadata":{},"sourceType":"script"}