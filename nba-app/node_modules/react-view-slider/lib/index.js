'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _range2 = require('lodash/range');

var _range3 = _interopRequireDefault(_range2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _inlineStylePrefixer = require('inline-style-prefixer');

var _inlineStylePrefixer2 = _interopRequireDefault(_inlineStylePrefixer);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-env browser */

var babelPluginFlowReactPropTypes_proptype_ViewProps = {
  index: require('prop-types').number.isRequired,
  key: require('prop-types').number.isRequired,
  active: require('prop-types').bool.isRequired,
  transitionState: require('prop-types').oneOf(['in', 'out', 'entering', 'leaving']).isRequired,
  style: require('prop-types').object.isRequired,
  ref: require('prop-types').func.isRequired
};
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_ViewProps', {
  value: babelPluginFlowReactPropTypes_proptype_ViewProps,
  configurable: true
});
var babelPluginFlowReactPropTypes_proptype_DefaultProps = {
  animateHeight: require('prop-types').bool.isRequired,
  keepViewsMounted: require('prop-types').bool.isRequired,
  transitionDuration: require('prop-types').number.isRequired,
  transitionTimingFunction: require('prop-types').string.isRequired,
  prefixer: typeof _inlineStylePrefixer2.default === 'function' ? require('prop-types').instanceOf(_inlineStylePrefixer2.default).isRequired : require('prop-types').any.isRequired,
  style: require('prop-types').object.isRequired,
  viewportStyle: require('prop-types').object.isRequired,
  measureHeight: require('prop-types').func.isRequired
};
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_DefaultProps', {
  value: babelPluginFlowReactPropTypes_proptype_DefaultProps,
  configurable: true
});
var babelPluginFlowReactPropTypes_proptype_Props = {
  activeView: require('prop-types').number.isRequired,
  numViews: require('prop-types').number.isRequired,
  renderView: require('prop-types').func.isRequired,
  keepViewsMounted: require('prop-types').bool.isRequired,
  animateHeight: require('prop-types').bool.isRequired,
  transitionDuration: require('prop-types').number.isRequired,
  transitionTimingFunction: require('prop-types').string.isRequired,
  prefixer: typeof _inlineStylePrefixer2.default === 'function' ? require('prop-types').instanceOf(_inlineStylePrefixer2.default).isRequired : require('prop-types').any.isRequired,
  fillParent: require('prop-types').bool,
  className: require('prop-types').string,
  style: require('prop-types').object.isRequired,
  viewportClassName: require('prop-types').string,
  viewportStyle: require('prop-types').object.isRequired,
  measureHeight: require('prop-types').func.isRequired,
  rootRef: require('prop-types').func,
  viewportRef: require('prop-types').func
};
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_Props', {
  value: babelPluginFlowReactPropTypes_proptype_Props,
  configurable: true
});
var babelPluginFlowReactPropTypes_proptype_State = {
  height: require('prop-types').number,
  transitioning: require('prop-types').bool.isRequired,
  activeView: require('prop-types').number.isRequired,
  prevActiveView: require('prop-types').number
};
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_State', {
  value: babelPluginFlowReactPropTypes_proptype_State,
  configurable: true
});


var fillStyle = {
  position: 'absolute',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0
};

var viewStyle = {
  position: 'relative',
  display: 'inline-block',
  verticalAlign: 'top',
  whiteSpace: 'normal',
  width: '100%'
};

var ViewSlider = function (_React$Component) {
  (0, _inherits3.default)(ViewSlider, _React$Component);

  function ViewSlider() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ViewSlider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ViewSlider.__proto__ || (0, _getPrototypeOf2.default)(ViewSlider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      height: undefined,
      transitioning: false,
      activeView: _this.props.activeView,
      // this is used to determine the correct transitionState for the previous active view.
      prevActiveView: null
    }, _this.views = [], _this.timeouts = {}, _this.measureHeight = function (node) {
      if (!node) return null;
      return _this.props.measureHeight(node);
    }, _this.onTransitionEnd = function (event) {
      // ignore transitionend events from deeper components
      if (event && event.target !== _this.viewport) return;
      // phase 0: unset height and disable transitions
      _this.setState({
        height: undefined,
        prevActiveView: null,
        transitioning: false
      });
    }, _this.getTransitionState = function (childIndex) {
      var _this$state = _this.state,
          activeView = _this$state.activeView,
          prevActiveView = _this$state.prevActiveView;

      if (prevActiveView == null) return childIndex === activeView ? 'in' : 'out';
      if (childIndex === activeView) return 'entering';
      if (childIndex === prevActiveView) return 'leaving';
      return 'out';
    }, _this.renderView = function (index) {
      var _this$props = _this.props,
          fillParent = _this$props.fillParent,
          prefixer = _this$props.prefixer,
          keepViewsMounted = _this$props.keepViewsMounted;
      var _this$state2 = _this.state,
          activeView = _this$state2.activeView,
          transitioning = _this$state2.transitioning;


      var style = (0, _extends3.default)({}, viewStyle);
      if (fillParent) {
        (0, _assign2.default)(style, fillStyle);
        style.overflow = 'auto';
        style.left = index * 100 + '%';
      }

      // when not transitioning, render empty placeholder divs before the active view to push it into the right
      // horizontal position
      if (!transitioning && activeView !== index && !keepViewsMounted) {
        return React.createElement('div', { key: index, style: prefixer.prefix(style) });
      }
      return _this.props.renderView({
        index: index,
        key: index,
        active: index === activeView,
        transitionState: _this.getTransitionState(index),
        style: prefixer.prefix(style),
        ref: function ref(c) {
          return _this.views[index] = c;
        }
      });
    }, _this.animateHeight = function () {
      var _this$props2 = _this.props,
          animateHeight = _this$props2.animateHeight,
          fillParent = _this$props2.fillParent,
          keepViewsMounted = _this$props2.keepViewsMounted;

      return animateHeight && !fillParent && !keepViewsMounted;
    }, _this.rootRef = function (node) {
      _this.root = node;
      var rootRef = _this.props.rootRef;

      if (rootRef) rootRef(node);
    }, _this.viewportRef = function (node) {
      _this.viewport = node;
      var viewportRef = _this.props.viewportRef;

      if (viewportRef) viewportRef(node);
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(ViewSlider, [{
    key: 'setTimeout',
    value: function (_setTimeout) {
      function setTimeout(_x, _x2, _x3) {
        return _setTimeout.apply(this, arguments);
      }

      setTimeout.toString = function () {
        return _setTimeout.toString();
      };

      return setTimeout;
    }(function (name, callback, delay) {
      if (this.timeouts[name]) clearTimeout(this.timeouts[name]);
      this.timeouts[name] = setTimeout(callback, delay);
    })
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var _this2 = this;

      var _props = this.props,
          activeView = _props.activeView,
          transitionDuration = _props.transitionDuration,
          keepViewsMounted = _props.keepViewsMounted;

      var newState = void 0;

      if (activeView !== this.state.activeView && this.state.height === undefined) {
        if (keepViewsMounted) {
          // scroll all views except the current back to the top
          for (var i = 0; i < this.views.length; i++) {
            if (i === this.state.activeView) continue;
            if (this.views[i]) this.views[i].scrollTop = 0;
          }
        }
        // phase 1: set current height
        newState = { height: this.measureHeight(this.views[this.state.activeView]) };
      } else if (this.state.height !== undefined && !this.state.transitioning) {
        // phase 2: enable transitions
        newState = { transitioning: true };
      } else if (activeView !== this.state.activeView) {
        // phase 3: change height/activeView
        newState = {
          activeView: activeView,
          prevActiveView: this.state.activeView,
          height: this.measureHeight(this.views[activeView])
        };
      }

      var finalNewState = newState;
      if (!finalNewState) return;

      this.setState(finalNewState, function () {
        if (finalNewState.activeView != null) {
          _this2.setTimeout('onTransitionEnd', _this2.onTransitionEnd, transitionDuration);
        }
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      for (var _name in this.timeouts) {
        clearTimeout(this.timeouts[_name]);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          style = _props2.style,
          className = _props2.className,
          viewportClassName = _props2.viewportClassName,
          viewportStyle = _props2.viewportStyle,
          numViews = _props2.numViews,
          prefixer = _props2.prefixer,
          fillParent = _props2.fillParent,
          transitionDuration = _props2.transitionDuration,
          transitionTimingFunction = _props2.transitionTimingFunction,
          keepViewsMounted = _props2.keepViewsMounted;

      var animateHeight = this.animateHeight();
      var _state = this.state,
          activeView = _state.activeView,
          height = _state.height,
          transitioning = _state.transitioning;


      var finalOuterStyle = (0, _extends3.default)({
        transitionProperty: 'height',
        transitionDuration: transitionDuration + 'ms',
        transitionTimingFunction: transitionTimingFunction,
        overflow: 'hidden',
        height: animateHeight && height != null ? height : undefined
      }, style);

      var finalViewportStyle = (0, _extends3.default)({
        transform: 'translateX(-' + activeView * 100 + '%)',
        whiteSpace: 'nowrap',
        minHeight: '100%',
        transition: transitioning ? 'transform ' + transitionTimingFunction + ' ' + transitionDuration + 'ms' : undefined
      }, viewportStyle);
      if (fillParent) {
        (0, _assign2.default)(finalOuterStyle, fillStyle);
        (0, _assign2.default)(finalViewportStyle, fillStyle);
      }

      // when not transitioning, render empty placeholder divs before the active view to push it into the right
      // horizontal position
      var views = (0, _range3.default)(transitioning || keepViewsMounted ? numViews : activeView + 1).map(this.renderView);

      return React.createElement(
        'div',
        {
          style: prefixer.prefix(finalOuterStyle),
          className: className,
          ref: this.rootRef
        },
        React.createElement(
          'div',
          {
            className: viewportClassName,
            style: prefixer.prefix(finalViewportStyle),
            ref: this.viewportRef,
            onTransitionEnd: this.onTransitionEnd
          },
          views
        )
      );
    }
  }]);
  return ViewSlider;
}(React.Component);

ViewSlider.defaultProps = {
  animateHeight: true,
  transitionDuration: 500,
  transitionTimingFunction: 'ease',
  keepViewsMounted: false,
  prefixer: new _inlineStylePrefixer2.default(),
  style: {},
  viewportStyle: {},
  measureHeight: function measureHeight(node) {
    return node.offsetHeight;
  }
};
ViewSlider.propTypes = {
  activeView: require('prop-types').number.isRequired,
  numViews: require('prop-types').number.isRequired,
  renderView: require('prop-types').func.isRequired,
  keepViewsMounted: require('prop-types').bool.isRequired,
  animateHeight: require('prop-types').bool.isRequired,
  transitionDuration: require('prop-types').number.isRequired,
  transitionTimingFunction: require('prop-types').string.isRequired,
  prefixer: typeof _inlineStylePrefixer2.default === 'function' ? require('prop-types').instanceOf(_inlineStylePrefixer2.default).isRequired : require('prop-types').any.isRequired,
  fillParent: require('prop-types').bool,
  className: require('prop-types').string,
  style: require('prop-types').object.isRequired,
  viewportClassName: require('prop-types').string,
  viewportStyle: require('prop-types').object.isRequired,
  measureHeight: require('prop-types').func.isRequired,
  rootRef: require('prop-types').func,
  viewportRef: require('prop-types').func
};
exports.default = ViewSlider;